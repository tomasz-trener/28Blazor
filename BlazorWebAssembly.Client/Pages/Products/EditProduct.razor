@page "/products/editProduct/{Id:int}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>EditProduct</h3>

@if(product == null)
{
    <p>@message</p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="product.Name" />
        </div>

        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" class="form-control" @bind-Value="product.Price" />
        </div>

        <div class="form-group">
            <label for="Barcode">Barcode</label>
            <InputText id="Barcode" class="form-control" @bind-Value="product.Barcode" />
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <InputText id="Description" class="form-control" @bind-Value="product.Description" />
        </div>

        <div class="form-group">
            <label for="CreatedDate">Created Date</label>
            <InputDate id="CreatedDate" class="form-control" @bind-Value="product.CreatedDate" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

    <button type="button" class="btn btn-primary" @onclick="HandleDelete">Delete</button>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private Product product;
    private string message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var reponse = await ProductService.GetProductAsync(Id);
        
        if (reponse.Success)
        {
            product = reponse.Data;
        }
        else
        {
            message = reponse.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await ProductService.UpdateProductAsync(product);
        if (response.Success)
        {
            NavigationManager.NavigateTo("/products/productsList");
        }
        else
        {
            message = response.Message;
        }
    }

    private async Task HandleDelete()
    {
        var response = await ProductService.DeleteProductAsync(Id);
        if (response.Success)
        {
            NavigationManager.NavigateTo("/products/productsList");
        }
        else
        {
            message = response.Message;
        }
    }
}
