@page "/products/productsList"

@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>ProductsList</h3>

<p>
    <NavLink class="btn btn-primary" href="/products/addProduct">Add New Product</NavLink>
</p>

@if (products == null)
{
    <p>@message</p>
}
else
{
    <div>
      @*   <input type="text" class="form-control" placeholder="Search" @bind="searchText" /> *@
       <InputText class="form-control" @bind-Value="searchText" placeholder="Search" />
       <button class="btn btn-primary" @onclick="Search" >Search</button>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th @onclick='() => ChangeSortOrder("Id")'>Id</th>
                <th @onclick='() => ChangeSortOrder("Name")'>Name</th>
                <th @onclick='() => ChangeSortOrder("Price")'>Price</th>
                <th @onclick='() => ChangeSortOrder("Barcode")'>Barcode</th>
                <th @onclick='() => ChangeSortOrder("CreatedDate")'>Created Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Barcode</td>
                    <td>@product.CreatedDate</td>
                    <td><button class="btn btn-primary" @onclick="()=>GoToEditProduct(product.Id)" >Edit</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="Previous" >Previous</button>
    <span>Page @currentPage</span>
    <button class="btn btn-primary" @onclick=Next >Next</button>

}

@code {

    private List<Product> products;
    private string message = "Loading...";
    private string searchText = string.Empty;

    private int currentPage = 1;
    private int pageSize = 10;

    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        // products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        //  var reponse = await ProductService.GetProductsAsync();
        var reponse = await ProductService.SearchProdutsAsync(null, currentPage, pageSize);
        if (reponse.Success)
        {
            products = reponse.Data;
        }
        else
        {
            message = reponse.Message;
        }

    }

    private void ChangeSortOrder(string column)
    {
        sortAscending = !sortAscending;
        if (sortAscending)
        {
            products = products.OrderBy(p => GetPropertyValue(p,column)).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => GetPropertyValue(p, column)).ToList();
        }
    }

    private object GetPropertyValue(Product product, string propertyName)
    {
        return product.GetType().GetProperty(propertyName).GetValue(product, null);
    }
 
    private async Task Search()
    {
        var response = await ProductService.SearchProdutsAsync(searchText,currentPage,pageSize);
        if (response.Success)
        {
            products = response.Data;
        }
        else
        {
            message = response.Message;
        }
    }

    private void GoToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/products/editProduct/{productId}");
    }

    private async Task Next()
    {
        currentPage++;
        await Search();
    }

    private async Task Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await Search();
        }
    }
}
